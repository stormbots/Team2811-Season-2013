// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc2811.Generated2013;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc2811.Generated2013.subsystems.Tilt;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController chassisSpeedController1;
    public static SpeedController chassisSpeedController2;
    public static SpeedController chassisSpeedController3;
    public static SpeedController chassisSpeedController4;
    public static RobotDrive chassisRobotDrive41;
    
    public static SpeedController trolley;
    public static SpeedController periscope;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static DigitalOutput solenoid;
    
  //  public static DoubleSolenoid chassisPneumatics1;
  //  public static DoubleSolenoid chassisPneumatics2;    
  //  public static DoubleSolenoid chassisPneumatics3;    
    public static DoubleSolenoid chassisPneumatics4;   
    public static DigitalInput shooterHaveFrisbee;
    public static DigitalInput shooterFrisbeeLoaded;
    public static DigitalOutput shooteroutput;
    public static DigitalOutput trolleyclaw;
    public static DigitalInput periscopePerMin;
    public static DigitalInput periscopePerMeet;
    public static DigitalInput periscopePerMax;
    public static DigitalInput trolleyTroMin;
    public static DigitalInput trolleyTroMax;
    public static Accelerometer trolleyAccelerometer;
 //   public static SpeedController spin1;
 //   public static SpeedController spin2;
 //   public static SpeedController roller;
    
    
  //  public static SpeedController trolleyConveyor;
    /*
    public static DigitalInput trolleyClawsIsClaw1Open;
    public static DigitalInput trolleyClawsIsClaw2Open;
    public static DigitalInput trolleyClawsIsClaw1Closed;
    public static DigitalInput trolleyClawsIsClaw2Closed;
    public static DigitalInput periscopeClawIsPerClawOpen;
    public static DigitalInput periscopeClawIsPerClawClosed;
    public static DigitalInput periscopeClawHaveBar;
    */
    //controller buttons
    private static Joystick stick;
    
    public static JoystickButton isFrisbee;
    public static JoystickButton isFrisbeeReady;
    public static JoystickButton trolleyClawsIsClaw1Open;
    public static JoystickButton trolleyClawsIsClaw2Open;
    public static JoystickButton trolleyClawsIsClaw1Closed;
    public static JoystickButton trolleyClawsIsClaw2Closed;
    public static JoystickButton periscopeClawIsPerClawOpen;
    public static JoystickButton periscopeClawIsPerClawClosed;
    public static DigitalInput periscopeClawHaveBar;
    //public static DigitalInput sonar;
    public static boolean inDrive = true;
    
    public static Tilt tilt;
    
    public static void init() {
        
          tilt = new Tilt();
        
        
        stick = new Joystick(2);
        
     //   spin1 = new Victor(1,7);
     //   spin2 = new Victor(1,8);
     //   roller = new Jaguar(1,9);
     //   chassisPneumatics1 = new DoubleSolenoid(1, 8, 8);
     //   chassisPneumatics2 = new DoubleSolenoid(1, 9, 9);       
     //   chassisPneumatics3 = new DoubleSolenoid(1, 11, 11);        
     //   chassisPneumatics4 = new DoubleSolenoid(1, 11, 12);
        periscopePerMin = new DigitalInput(1, 1);
            LiveWindow.addSensor("Periscope", "PerMin", periscopePerMin);        
        periscopePerMeet = new DigitalInput(1, 2);
            LiveWindow.addSensor("Periscope", "PerMeet", periscopePerMeet);       
        periscopePerMax = new DigitalInput(1, 3);
            LiveWindow.addSensor("Periscope", "PerMax", periscopePerMax);       
        trolleyTroMin = new DigitalInput(1, 4);
            LiveWindow.addSensor("Trolley", "TroMin", trolleyTroMin);       
        trolleyTroMax = new DigitalInput(1, 5);
            LiveWindow.addSensor("Trolley", "TroMax", trolleyTroMax);       
        trolleyAccelerometer = new Accelerometer(1, 7);
            LiveWindow.addSensor("Trolley", "Accelerometer", trolleyAccelerometer);
            trolleyAccelerometer.setSensitivity(1.0);
            trolleyAccelerometer.setZero(2.5);

        //controller buttons
            trolleyClawsIsClaw1Open = new JoystickButton(stick,1);
            trolleyClawsIsClaw1Closed = new JoystickButton(stick,2);
            trolleyClawsIsClaw2Open = new JoystickButton(stick,3);
            trolleyClawsIsClaw2Closed = new JoystickButton(stick,4);
            periscopeClawIsPerClawOpen = new JoystickButton(stick,5);
            periscopeClawIsPerClawClosed = new JoystickButton(stick,6);
            
            periscopeClawHaveBar = new DigitalInput(1,6);
            solenoid = new DigitalOutput(1,10);
            
     //   trolleyConveyor = new Talon(1, 5);
     //       LiveWindow.addActuator("Trolley", "Conveyor", (Talon) trolleyConveyor); 
            /*
        trolleyClawsIsClaw1Open = new DigitalInput(1, 6);
            LiveWindow.addSensor("TrolleyClaws", "IsClaw1Open", trolleyClawsIsClaw1Open);        
        trolleyClawsIsClaw2Open = new DigitalInput(1, 7);
            LiveWindow.addSensor("TrolleyClaws", "IsClaw2Open", trolleyClawsIsClaw2Open);        
        trolleyClawsIsClaw1Closed = new DigitalInput(1, 8);
            LiveWindow.addSensor("TrolleyClaws", "IsClaw1Closed", trolleyClawsIsClaw1Closed);       
        trolleyClawsIsClaw2Closed = new DigitalInput(1, 9);
            LiveWindow.addSensor("TrolleyClaws", "IsClaw2Closed", trolleyClawsIsClaw2Closed);        
        periscopeClawIsPerClawOpen = new DigitalInput(1, 10);
            LiveWindow.addSensor("PeriscopeClaw", "IsPerClawOpen", periscopeClawIsPerClawOpen);
        periscopeClawIsPerClawClosed = new DigitalInput(1, 13);
            LiveWindow.addSensor("PeriscopeClaw", "IsPerClawClosed", periscopeClawIsPerClawClosed);
        periscopeClawHaveBar = new DigitalInput(1, 14);
            LiveWindow.addSensor("PeriscopeClaw", "HaveBar", periscopeClawHaveBar);
*/
        shooteroutput = new DigitalOutput(1,12);
        trolleyclaw = new DigitalOutput(1,11);
         
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassisSpeedController1 = new Victor(1, 1);
	LiveWindow.addActuator("Chassis", "Speed Controller 1", (Victor) chassisSpeedController1);
        
        chassisSpeedController2 = new Victor(1, 2);
	LiveWindow.addActuator("Chassis", "Speed Controller 2", (Victor) chassisSpeedController2);
        
        chassisSpeedController3 = new Victor(1, 3);
	LiveWindow.addActuator("Chassis", "Speed Controller 3", (Victor) chassisSpeedController3);
        
        chassisSpeedController4 = new Victor(1, 4);
	LiveWindow.addActuator("Chassis", "Speed Controller 4", (Victor) chassisSpeedController4);
        
        chassisRobotDrive41 = new RobotDrive(chassisSpeedController1, chassisSpeedController2,
              chassisSpeedController3, chassisSpeedController4);
	
        chassisRobotDrive41.setSafetyEnabled(true);
        chassisRobotDrive41.setExpiration(0.1);
        chassisRobotDrive41.setSensitivity(0.5);
        chassisRobotDrive41.setMaxOutput(1.0);
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        

        trolley = new Talon(1, 5);//CHANge thiSSSS!!!
	LiveWindow.addActuator("Trolley", "Speed Controller 5", (Victor) trolley);
        periscope = new Victor(1, 6);
	LiveWindow.addActuator("Periscope", "Speed Controller 6", (Victor) periscope);
        
    }
}
