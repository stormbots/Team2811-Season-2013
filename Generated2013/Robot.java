// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc2811.Generated2013;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc2811.Generated2013.commands.*;
import org.usfirst.frc2811.Generated2013.subsystems.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    Command autonomousCommand;
    Command Compress;
    public static OI oi;
    public static Chassis chassis;
    public static Shootythingy shootythingy;
    public static SendableChooser autoChooser;

    public void robotInit() {
	RobotMap.init();
        chassis = new Chassis();
        shootythingy = new Shootythingy();
        oi = new OI();	
        RobotMap.shifter.set(true);
        RobotMap.flipper.set(false);
        autonomousCommand = new AutonomousCommand();
        
        Compress = new Compress();
        Compress.start();
        
        
        System.out.println(DriverStation.getInstance().getDigitalIn(1));
        System.out.println(DriverStation.getInstance().getDigitalIn(2));
        System.out.println(DriverStation.getInstance().getDigitalIn(3));
        System.out.println(DriverStation.getInstance().getAnalogIn(1));
//        DriverStation.getInstance().setDigitalOut(1, true);
//        DriverStation.getInstance().setDigitalOut(6, true);
        
        
        autoChooser = new SendableChooser(); 
        autoChooser.addDefault("3-point shoot", new ShootCenter());
        autoChooser.addObject("2-point shoot", new ShootSide());
        SmartDashboard.putData("Autonomous", autoChooser);

        
        //  OI.write("Trolley", "Initialized");
        //  OI.write("Chassis", "Initialized");
        //  OI.write("Periscope", "Initialized");
        
        
//        SmartDashboard.putData("Scheduler Data", Scheduler.getInstance());
        
//        SmartDashboard.putData("Trolley activity...", trolley);
//        SmartDashboard.putData("Periscope activity...", periscope);
//        SmartDashboard.putData("Chassis activity...", chassis);
        
//        DriverStationLCD lcd = DriverStationLCD.getInstance();
//        lcd.println(DriverStationLCD.Line.kUser2, 1, "Hello");
//        lcd.updateLCD();
        
//        ScrollPane.clear();
        
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        RobotMap.shifter.set(true);
        Command C = (Command) autoChooser.getSelected();
        C.start();
//        if (autonomousCommand != null) {
//
//            autonomousCommand.start();
//        }
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        updateDashboard();
    }

    public void teleopInit() {
	// This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        RobotMap.shifter.set(true);
        RobotMap.Teleop = true;
        // this line or comment it out.
        if (autonomousCommand != null) {
            autonomousCommand.cancel();
        }
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        updateDashboard();
    }

    /**
     * This function called periodically during test mode
     */
    public void testPeriodic() {
        //LiveWindow.run();
        updateDashboard();
    }
    private void updateDashboard() {
        SmartDashboard.putNumber("MotorPort1",RobotMap.chassisSpeedController1.get());
        SmartDashboard.putNumber("MotorPort2",RobotMap.chassisSpeedController2.get());
        SmartDashboard.putNumber("MotorPort3",RobotMap.chassisSpeedController3.get());
        SmartDashboard.putNumber("MotorPort4",RobotMap.chassisSpeedController4.get());
        SmartDashboard.putNumber("Shooter speed", -RobotMap.spin1.get());
        SmartDashboard.putNumber("Shooter speed (2)",-RobotMap.spin1.get());
        SmartDashboard.putBoolean("Compressor", RobotMap.compin.get());
        SmartDashboard.putData("Autonomous", autoChooser);
        SmartDashboard.putBoolean("Shooting", RobotMap.shooting);
        SmartDashboard.putBoolean("flipping",RobotMap.flipping);
        SmartDashboard.putBoolean("Backwards",RobotMap.backwards);
        
    }
    
}
