// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc2811.Generated2013.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2811.Generated2013.OI;
import org.usfirst.frc2811.Generated2013.Robot;
import org.usfirst.frc2811.Generated2013.RobotMap;

/**
 *
 */
public class  TeleopCommand extends Command {

    public TeleopCommand() {
        // Use requires() here to declare subsystem dependencies
        
        requires(Robot.chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        if (RobotMap.inDrive){
            Robot.chassis.driveWithJoystick(Robot.oi.getJoystick1());
        } else {
            Robot.chassis.stop();
        }
        Robot.shootythingy.useFlap(Robot.oi.getJoystick1());
        if (!OI.tigger.get()){
        Robot.trolley.stickRun(Robot.oi.getJoystick1());
        }
     //   RobotMap.towerclaw.set(OI.towbutt.get());
     //   RobotMap.trolleyclaw.set(OI.trobutt.get());
        System.out.println(OI.towbutt.get()+" "+OI.trobutt.get());
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
