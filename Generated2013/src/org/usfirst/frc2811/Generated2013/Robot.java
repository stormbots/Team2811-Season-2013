// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc2811.Generated2013;

import org.usfirst.frc2811.Generated2013.subsystems.Tilt;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc2811.Generated2013.commands.*;
import org.usfirst.frc2811.Generated2013.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    
    Command Compress;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Chassis chassis;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Trolley trolley;
    public static Periscope periscope;
    public static Shootythingy shootythingy;
    public static Tilt tilt;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
	RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassis = new Chassis();
        trolley = new Trolley();
        periscope = new Periscope();
        shootythingy = new Shootythingy();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // This MUST be here. If the OI creates Commands (which it very likely
        // will), constructing it during the construction of CommandBase (from
        // which commands extend), subsystems are not guaranteed to be
        // yet. Thus, their requires() statements may grab null pointers. Bad
        // news. Don't move it.
        oi = new OI();
        tilt = new Tilt();	
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        autonomousCommand = new AutonomousCommand();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        Compress = new Compress();
        Compress.start();
        
        
        System.out.println(DriverStation.getInstance().getDigitalIn(1));
        System.out.println(DriverStation.getInstance().getDigitalIn(2));
        System.out.println(DriverStation.getInstance().getDigitalIn(3));
        System.out.println(DriverStation.getInstance().getAnalogIn(1));
//        DriverStation.getInstance().setDigitalOut(1, true);
//        DriverStation.getInstance().setDigitalOut(6, true);
        
        SendableChooser autoChooser;
        autoChooser = new SendableChooser();
        autoChooser.addDefault("Pyramid Left Side", new DriveInASquare());
        autoChooser.addObject("Pyramid Center", new TrolleyToMinLimit());
        autoChooser.addObject("Pyramid Right Side", new PeriToMinLimit());
        SmartDashboard.putData("Autonomous", autoChooser);
        
        SmartDashboard.putNumber("vbar", 52.4);
        SmartDashboard.putNumber("vbar", SmartDashboard.getNumber("vbar")+25.0);
        
        //  OI.write("Trolley", "Initialized");
        //  OI.write("Chassis", "Initialized");
        //  OI.write("Periscope", "Initialized");
        
        
//        SmartDashboard.putData("Scheduler Data", Scheduler.getInstance());
        
        SmartDashboard.putData("Trolley activity...", trolley);
        SmartDashboard.putData("Periscope activity...", periscope);
        SmartDashboard.putData("Chassis activity...", chassis);
        
//        DriverStationLCD lcd = DriverStationLCD.getInstance();
//        lcd.println(DriverStationLCD.Line.kUser2, 1, "Hello");
//        lcd.updateLCD();
        
//        ScrollPane.clear();
        
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) {
            autonomousCommand.start();
        }
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        //updateDashboard();
    }

    public void teleopInit() {
	// This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) {
            autonomousCommand.cancel();
        }
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        //updateDashboard();
    }

    /**
     * This function called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
        //updateDashboard();
    }
    
}
