// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc2811.Generated2013.subsystems;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc2811.Generated2013.OI;
import org.usfirst.frc2811.Generated2013.RobotMap;
import org.usfirst.frc2811.Generated2013.commands.TeleopCommand;


/**
 *
 */
public class Chassis extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController speedController1 = RobotMap.chassisSpeedController1;
    SpeedController speedController2 = RobotMap.chassisSpeedController2;
    SpeedController speedController3 = RobotMap.chassisSpeedController3;
    SpeedController speedController4 = RobotMap.chassisSpeedController4;
    RobotDrive robotDrive41 = RobotMap.chassisRobotDrive41;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
//    DoubleSolenoid chassisPneumatics1 = RobotMap.chassisPneumatics1;
    
    /*
     * Controller 1 = Front Left
     * Controller 2 = Rear Left
     * Controller 3 = Front Right (REVERSE POLARITY)
     * Controller 4 = Rear Right (REVERSE POLARITY)
     */
    
    
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        setDefaultCommand(new TeleopCommand());
    }
    
    // From here down we find a set of low level methods designed to control
    // atomic chassis actions.  Typically these will be just one or two lines
    // that activate some motor or other in this subsystem.
    // These might involve limit switches if extents cannot be exceeded.
    
    public void driveWithJoystick(Joystick stick) {
        //If the mechanums don't seem to work right, try inverting Y and swapping
        //motor polarity on offending wheels.  Test by going forward and backward
        //robotDrive41.mecanumDrive_Cartesian(deadZone(-stick.getX()),deadZone(-stick.getY()),deadZone(-stick.getTwist()/2),0.0);
        if (OI.safety.get()) {
        robotDrive41.mecanumDrive_Cartesian(0.0,deadZone(-stick.getY()),0.0,0.0);
        } else { stop(); }
        //System.out.println(speedController1.get());
        //Set up this way so that mechanum and arcade are interchangeable.
        //drive.arcadeDrive(stick.getX(),stick.getY(), false);
    }
    
    public void forward() {
        robotDrive41.mecanumDrive_Cartesian(0.0, 0.5, 0.0, 0.0);
        //drive.arcadeDrive(1.0, 0.0);
    }
    
    public void left() {
        robotDrive41.mecanumDrive_Cartesian(-0.5, 0.0, 0.0, 0.0);
        //drive.arcadeDrive(-1.0, 1.0);
    }
    
    public void back() {
        robotDrive41.mecanumDrive_Cartesian(0.0, -0.5, 0.0, 0.0);
        //drive.arcadeDrive(-1.0, 0.0);
    }
    
    public void right() {
        robotDrive41.mecanumDrive_Cartesian(0.5, 0.0, 0.0, 0.0);
        //drive.arcadeDrive(1.0, -1.0);
    }
    
    public void stop() {
        robotDrive41.mecanumDrive_Cartesian(0.0, 0.0, 0.0, 0.0);
    }
    
    private double deadZone(double position) {
        if (Math.abs(position) <= 0.05) { return 0.0; }
        return position;
    }
    
}

