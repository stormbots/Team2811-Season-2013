// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.

//2 IS SHIFTER, 1 IS SHOOTER

package org.usfirst.frc2811.Generated2013;
    
import edu.wpi.first.wpilibj.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static SpeedController chassisSpeedController1;
    public static SpeedController chassisSpeedController2;
    public static SpeedController chassisSpeedController3;
    public static SpeedController chassisSpeedController4;
    
    public static RobotDrive chassisRobotDrive41;
    
    public static SpeedController trolley;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static Solenoid shifter;   
    public static Solenoid pusher;
    public static Solenoid flipper;
    
    public static DigitalInput shooterHaveFrisbee;
    public static DigitalInput shooterFrisbeeLoaded;
    public static DigitalInput towersensor;
    public static DigitalInput trolleyTroMin;
    public static DigitalInput trolleyTroMax;
    public static ADXL345_I2C robotAccelerometer;
    public static SpeedController spin1;
    public static SpeedController spin2;
    
    public static DigitalInput compin;
    public static Relay compout;
    
    
    public static final double minSpeed = -.4;
    public static final double maxSpeed = -.6;
    public static final double rangeSpeed = 2/(maxSpeed-minSpeed);
    
    public static DigitalInput trolleyClawsIsClaw1Open;
    public static DigitalInput periscopeClawIsPerClawOpen;
    public static DigitalInput periscopeClawHaveBar;
    
    public static int position = 0;
    
    public static boolean inDrive = true;
    public static boolean Teleop = false;
    public static boolean shooting = false;
    public static boolean flipping = false;
    public static double doubler = 1.0;
    public static boolean backwards = false;
    
    public static void init() {
        doubler = 1.0;
        pusher = new Solenoid(1);
        shifter = new Solenoid(2);
        flipper = new Solenoid(3);
        spin1 = new Talon(1,5);
        spin2 = new Talon(1,6);
        
        towersensor = new DigitalInput(1, 6);
//            LiveWindow.addSensor("Periscope", "PerMin", towersensor);             
        trolleyTroMin = new DigitalInput(1, 9);
//            LiveWindow.addSensor("Trolley", "TroMin", trolleyTroMin);       
        trolleyTroMax = new DigitalInput(1, 10);
//            LiveWindow.addSensor("Trolley", "TroMax", trolleyTroMax);       
        robotAccelerometer = new ADXL345_I2C(1, ADXL345_I2C.DataFormat_Range.k2G);

        trolleyClawsIsClaw1Open = new DigitalInput(1,2);
        periscopeClawIsPerClawOpen = new DigitalInput(1,4);
            
        periscopeClawHaveBar = new DigitalInput(1,5);
        
        compin = new DigitalInput(1,1);
        compout = new Relay(1);
         
        chassisSpeedController1 = new Talon(1, 1);
        chassisSpeedController2 = new Talon(1, 2);
        chassisSpeedController3 = new Talon(1, 3);
        chassisSpeedController4 = new Talon(1, 4);
        
        chassisRobotDrive41 = new RobotDrive(chassisSpeedController1, chassisSpeedController2,
              chassisSpeedController3, chassisSpeedController4);
	
        chassisRobotDrive41.setSafetyEnabled(true);
        chassisRobotDrive41.setExpiration(0.1);
        chassisRobotDrive41.setSensitivity(0.5);
        chassisRobotDrive41.setMaxOutput(1.0);
        
        trolley = new Talon(1, 7);
//	LiveWindow.addActuator("Trolley", "Speed Controller 5", (Talon) trolley);
        
    }
}
